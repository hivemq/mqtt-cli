buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.2.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '4.0.4' apply false
    id "com.github.hierynomus.license" version "0.15.0"
    id 'org.gradle.crypto.checksum' version '1.1.0'
    id "nebula.ospackage" version "7.1.0"
    id 'edu.sc.seis.launch4j' version '2.4.6'
    id 'com.palantir.graal' version '0.6.0'
    id 'de.thetaphi.forbiddenapis' version '2.6' apply false
    id "com.github.breadmoirai.github-release" version "2.2.9"
}

apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

apply plugin: 'com.palantir.graal'

// Project settings
// Project settings
javadoc.options.encoding = 'UTF-8'

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'

    def jv = System.properties['java.version']
    if ( jv.startsWith('6') || jv.startsWith('7')  ) {
        throw new RuntimeException('Incompatible JRE version: ' + System.properties['java.version'] + '. Use at least JRE 8 instead.')
    }
}


compileTestJava {
    options.encoding = 'UTF-8'
}

group = 'com.hivemq'
version = '1.0.0' + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")
description = 'MQTT CLI is a tool that provides a feature rich command line interface for connecting, ' +
        'publishing, subscribing, unsubscribing and disconnecting ' +
        'various MQTT clients simultaneously and supports  MQTT 5.0 and MQTT 3.1.1 '

application {
    mainClassName = 'com.hivemq.cli.MqttCLIMain'
}

idea {
    module {
        generatedSourceDirs += file('build/generated/sources/annotationProcessor/java/main')
    }
}
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
    jcenter()
}


ext {
    moduleName = 'com.hivemq.cli'
    readableName = 'mqtt-cli'
    appName = 'MQTT CLI'
    githubOrg = 'hivemq'
    githubRepo = 'mqtt-cli'
    githubUrl = 'https://github.com/' + githubOrg + '/' + githubRepo
    scmConnection = 'scm:git:git://github.com/' + githubOrg + '/' + githubRepo + '.git'
    scmDeveloperConnection = 'scm:git:ssh://git@github.com/' + githubOrg + '/' + githubRepo + '.git'
    issuesUrl = githubUrl + '/issues'
    docUrl = 'https://' + githubOrg + '.github.io/' + githubRepo + '/'
    prevVersion = ''

    appJarName = "${readableName}.jar"
    appExe = "${readableName}.exe"

    // Directories
    
    iconsDir = "${projectDir}/icons"

    resDir = "${projectDir}/res"
    dmgDir = "${projectDir}/dmg"
    pkgDir = "${projectDir}/packages"
    brewDir = "${pkgDir}/homebrew"
    debDir = "${pkgDir}/debian"
    rpmDir = "${pkgDir}/rpm"
    winDir = "${pkgDir}/windows"

    buildLaunch4j = "$buildDir/launch4j"

    buildPkgDir = "${buildDir}/packages"
    buildBrewDir =  "${buildPkgDir}/homebrew"
    buildDebDir = "${buildPkgDir}/debian"
    buildRpmDir = "${buildPkgDir}/rpm"
    buildWinDir = "${buildPkgDir}/windows"

    // Icons
    hmqIco = "${iconsDir}/05-mqtt-cli-icon.ico"
    hmqLogo = "${iconsDir}/05-mqtt-cli-icon.png"

    // Vendor details

    copyright = "Copyright 2019 HiveMQ and the HiveMQ Community"
    vendor = "HiveMQ GmbH"
    website = "https://www.hivemq.com/"
    license = "${projectDir}/LICENSE"

    // Dependency versions

    picoclishell3Version = '4.0.4'
    picocliVersion = '4.0.4'
    jline3Version = '3.12.1'
    jline3JansiVersion = '3.12.1'
    daggerVersion = '2.21'
    guavaVersion ='27.0.1-jre'
    hivemqclientVersion = '1.1.1'
    tinylogVersion = '1.3.6'
    jcToolsVersion = '2.1.2'
    jetbrainsAnnotationsVersion = '17.0.0'
    bouncycastleVersion='1.62'
    nettyVersion = '4.1.37.Final'
}

dependencies {

    compile group: 'com.google.dagger', name: 'dagger', version: daggerVersion 
    annotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion 

    compile group: 'org.jline', name: 'jline', version: jline3Version
    compile group: 'org.jline', name: 'jline-terminal-jansi', version: jline3JansiVersion

    implementation group: 'info.picocli', name: 'picocli', version: picocliVersion
    implementation group: 'info.picocli', name: 'picocli-shell-jline3', version: picoclishell3Version
    implementation group: 'info.picocli', name: 'picocli-codegen', version: picocliVersion

    implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
    implementation group: 'org.tinylog', name: 'tinylog', version: tinylogVersion
    implementation group: 'org.jetbrains', name: 'annotations', version: jetbrainsAnnotationsVersion
    
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: bouncycastleVersion
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: bouncycastleVersion

    implementation group: 'com.hivemq', name: 'hivemq-mqtt-client', version: hivemqclientVersion

    implementation group: 'io.netty', name: 'netty-handler', version: nettyVersion
    implementation group: 'io.netty', name: 'netty-codec-http', version: nettyVersion
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: nettyVersion, classifier: 'linux-x86_64'

    compileOnly 'com.oracle.substratevm:svm:19.2.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    
    def junitVintageVersion = '5.2.0'
    def junitJupiterVersion = '5.5.1'
    def junitJupiterParamVersion = '5.4.2'
    
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
    testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: junitVintageVersion
    
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitJupiterParamVersion

}

/**************
 * Compliance *
 **************/

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.cddlOnePointZero = license('CDDL, Version 1.0', 'http://glassfish.java.net/public/CDDLv1.0.html')
    ext.cddlOnePointOne = license('CDDL, Version 1.1', 'http://glassfish.java.net/public/CDDL+GPL_1_1.html')
    ext.lgplTwoPointOne = license('LGPL, Version 2.1', 'http://www.gnu.org/licenses/lgpl-2.1.html')
    ext.eplOnePointZero = license('EPL, Version 1.0', 'http://www.eclipse.org/legal/epl-v10.html')

    aliases = [
            (apacheTwo)       : ['Apache License 2', 'Apache Software License - Version 2.0', 'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', 'Apache 2.0', 'The Apache License, Version 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (cddlOnePointZero): ['Common Development and Distribution License (CDDL) v1.0', 'COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0'],
            (cddlOnePointOne) : ['CDDL 1.1'],
            (lgplTwoPointOne) : ['LGPL 2.1', 'GNU Lesser General Public License'],
            (eplOnePointZero) : ['Eclipse Public License - Version 1.0', 'Eclipse Public License', 'Eclipse Public License - v 1.0']
    ]
}

license {
    include "**/*.java"
    header = file('HEADER')
}


task updateThirdPartyLicenses {
    group 'license'
    dependsOn ':downloadLicenses'
    doLast {
        javaexec {
            main = '-jar'
            args = ["${rootDir}/gradle/tools/license-third-party-tool-1.0.jar",
                    "${buildDir}/reports/license/dependency-license.xml",
                    "${projectDir}/src/packaging/third-party-licenses/licenses",
                    "${projectDir}/src/packaging/third-party-licenses/licenses.html"
            ]
        }
    }
}

forbiddenApisMain {
    exclude '**/LoggingBootstrap.class'
}

forbiddenApis {
    bundledSignatures = ['jdk-system-out']
    ignoreFailures = true
}

//disable
forbiddenApisTest.enabled = false


test {
    useJUnitPlatform()
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }

}

jar {

    manifest () {
        attributes(
                'Built-JDK': System.getProperty('java.version'),
                'Implementation-Title': project.appName,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.vendor,
                'Specification-Title': project.appName,
                'Specification-Version': project.version,
                'Specification-Vendor': project.vendor,
                'Main-Class': application.mainClassName,
                // 'Class-Path': configurations.compile.collect { 'lib/' + it.getName() }.join(' '),
                'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
                // 'SplashScreen-Image': '01-mqtt-cli.svg',
                // 'Sealed': 'true'
        )
    }

    from(configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    finalizedBy shadowJar
}

license {
    include "**/*.java"
    header = file('HEADER')
}


test {
    useJUnitPlatform()
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }
    
}


graal {
    graalVersion '19.2.0'
    outputName "${rootProject.name}"
    mainClass application.mainClassName
    option '-H:+PrintClassInitialization'
    option '-H:ReflectionConfigurationFiles=tools/reflection.json'
    option '-H:-UseServiceLoaderFeature'
    option '-H:IncludeResources="org/jline/utils/*.*'
    option '-H:IncludeResources="org/jline/terminal/*.*'
    option '--allow-incomplete-classpath'
    option '--report-unsupported-elements-at-runtime'
    option '--initialize-at-build-time'
    option '--initialize-at-run-time=' +
            'io.netty.channel.unix.Errors,' +
            'io.netty.channel.unix.IovArray,' +
            'io.netty.channel.unix.Limits,' +
            'io.netty.channel.unix.Socket,' +
            'io.netty.channel.epoll.EpollEventArray,' +
            'io.netty.channel.epoll.EpollEventLoop,' +
            'io.netty.channel.epoll.Native,' +
            'io.netty.handler.ssl.ConscryptAlpnSslEngine,' +
            'io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator,' +
            'io.netty.handler.ssl.JettyNpnSslEngine,' +
            'io.netty.handler.ssl.ReferenceCountedOpenSslEngine,' +
            'io.netty.handler.ssl.ReferenceCountedOpenSslContext,' +
            'io.netty.handler.codec.http.HttpObjectEncoder,' +
            'io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder,' +
            'com.hivemq.client.internal.mqtt.codec.encoder.MqttPingReqEncoder,' +
            'com.hivemq.client.internal.mqtt.codec.encoder.mqtt3.Mqtt3DisconnectEncoder'
}

// Homebrew

task buildPackageBrew(type: Zip) {
    dependsOn shadowJar

    archiveFileName = project.readableName + '-' + project.version + '-brew.zip'
    destinationDirectory = file(project.buildBrewDir)

    from shadowJar.archiveFile
    from "$brewDir/mqtt"

    into('brew') {
        from shadowJar.archiveFile
        from "$brewDir/mqtt"
    }

    from(projectDir) {
        include 'LICENSE'
        into 'licenses'
    }
}


task buildBrewFormula(type: Copy) {
    dependsOn buildPackageBrew

    from "$brewDir/mqtt-cli.rb"
    into "$buildBrewDir"

    doLast {
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@description@@", value: project.description)
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@version@@", value: project.version)
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@filename@@", value: buildPackageBrew.archiveFileName.get())
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@shasum@@", value: checkSum(buildPackageBrew.archiveFile.get().getAsFile()))
    }

}

// DEB & RPM

ospackage {
    packageName project.readableName
    version project.version

    url project.website

    summary 'MQTT Command Line Interface for interacting with a MQTT broker'
    packageDescription project.description
    license 'apache2'
    packager ''
    vendor project.vendor

    os LINUX
    type BINARY

    user 'root'
    permissionGroup 'root'

    into "/opt/$packageName"
    from(shadowJar.outputs.files)
    from(configurations.runtime) {
        into 'lib'
    }
    from('lib') {
        into 'lib'
    }
    from(projectDir) {
        include 'LICENSE'
        into 'licenses'
        fileType LICENSE
    }
    from(debDir) {
        include 'mqtt'
        fileMode 0755
        filter {
            it.replaceAll("@@jarPath@@", "/opt/${packageName}/${shadowJar.archiveFileName.get()}")
        }
    }


    link('/usr/bin/mqtt', "/opt/$packageName/mqtt", 0755)

}

buildDeb {
    requires("default-jre").or("java8-runtime")
}

buildRpm {
    arch NOARCH
    requires('jre', '1.8.0', GREATER | EQUAL)
}

task buildDebianPackage(type: Copy) {
    from buildDeb
    into project.buildDebDir
    include "*.deb"
}

task buildRpmPackage(type: Copy) {
    from buildRpm
    into project.buildRpmDir
    include "*.rpm"
}

// Windows
launch4j {
    outputDir = 'packages/windows'
    headerType = "console"
    mainClassName = application.mainClassName
    icon = project.hmqIco
    jar = "lib/${project.tasks.shadowJar.archiveFileName.get()}"
    outfile = project.appExe
    copyright = project.copyright
    companyName = project.vendor
    downloadUrl = "https://openjdk.java.net/install/"
    jreMinVersion = "1.8"
    windowTitle = project.appName
    version = project.version
    textVersion = project.version
}

task buildWindowsZip(type: Zip) {
    dependsOn createExe

    archiveFileName = "${project.readableName}-${project.version}-win.zip"
    destinationDirectory = file(project.buildWinDir)

    from ("${project.winDir}") {
        include '*'
        filter { line ->
            line.replace('@@exeName@@', project.appExe)
        }
    }
    from launch4j.dest
    from project.license
}

// Package tasks

task buildPackageAll {
    dependsOn buildBrewFormula, buildDebianPackage, buildRpmPackage, buildWindowsZip
}

githubRelease {
    token "" + System.getenv("GITHUB_API_TOKEN")
    owner = project.githubOrg
    targetCommitish "develop"
    body ""
    draft false
    prerelease false
    releaseAssets file("${project.buildRpmDir}/${project.readableName}-${project.version}.noarch.rpm"),
            file("${project.buildDebDir}/${project.readableName}_${project.version}_all.deb"),
            file("${project.buildBrewDir}/${project.readableName}-${project.version}-brew.zip"),
            buildWindowsZip
    overwrite true
}


tasks.githubRelease.dependsOn tasks.buildPackageAll

// Helpers
import java.security.DigestInputStream
import java.security.MessageDigest
static def checkSum(File file) {
        file.withInputStream {
            new DigestInputStream(it, MessageDigest.getInstance('SHA-256')).withStream {
                it.eachByte {}
                it.messageDigest.digest().encodeHex() as String
            }
        }
}

