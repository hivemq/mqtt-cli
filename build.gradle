buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
    dependencies {
        dependencies {
            if (gradle.includedBuilds.find { it.name == "plugins" } != null) {
                classpath("com.hivemq:plugins")
            }
        }
    }
}

plugins {
    id "java"
    id "idea"
    id "application"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.gradle.crypto.checksum" version "1.2.0"
    id "nebula.ospackage" version "8.5.6"
    id "edu.sc.seis.launch4j" version "2.5.0"
    id "com.palantir.graal" version "0.7.2"
    id "de.thetaphi.forbiddenapis" version "3.1"
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id "org.ajoberstar.git-publish" version "3.0.0"
    id "org.owasp.dependencycheck" version "6.1.5"
    id "com.github.ben-manes.versions" version "0.38.0"
    id "org.openapi.generator" version "4.3.1"
}


/****************
 * Project Settings *
 ***************/

javadoc.options.encoding = "UTF-8"

group = "com.hivemq"
description = "MQTT CLI is a tool that provides a feature rich command line interface for connecting, " +
        "publishing, subscribing, unsubscribing and disconnecting " +
        "various MQTT clients simultaneously and supports  MQTT 5.0 and MQTT 3.1.1 "

application {
    mainClassName = "com.hivemq.cli.MqttCLIMain"
}

idea {
    module {
        generatedSourceDirs += file("build/generated/sources/annotationProcessor/java/main")
    }
}

repositories {
    mavenCentral()
    jcenter()
}

/****************
 * OpenAPI HiveMQ Rest API dependency *
 ***************/

tasks.register("generateHiveMqOpenApi", GenerateTask) {
    group = "hivemq"
    generatorName = "java"
    inputSpec = "$rootDir/specs/HiveMQ-${getProperty("hivemq-api.version")}-OpenAPI-spec.yaml".toString()
    outputDir = "$buildDir/generated/openapi".toString()
    apiPackage = "com.hivemq.cli.openapi.hivemq"
    modelPackage = "com.hivemq.cli.openapi.hivemq"
    configOptions = [
            dateLibrary: "java8"
    ]
}

sourceSets {
    main {
        java {
            srcDir "$rootDir/build/generated/openapi/src/main/java"
        }
    }
}

tasks.compileJava {
    dependsOn(tasks.generateHiveMqOpenApi)
}


/****************
 * Metadata *
 ***************/


ext {
    moduleName = "com.hivemq.cli"
    readableName = "mqtt-cli"
    appName = "MQTT CLI"
    githubOrg = "hivemq"
    githubRepo = "mqtt-cli"
    githubUrl = "https://github.com/" + githubOrg + "/" + githubRepo
    scmConnection = "scm:git:git://github.com/" + githubOrg + "/" + githubRepo + ".git"
    scmDeveloperConnection = "scm:git:ssh://git@github.com/" + githubOrg + "/" + githubRepo + ".git"
    issuesUrl = githubUrl + "/issues"
    docUrl = "https://" + githubOrg + ".github.io/" + githubRepo + "/"
    prevVersion = ""

    appJarName = "${readableName}.jar"
    appExe = "${readableName}.exe"

    // Directories

    iconsDir = "${projectDir}/icons"

    resDir = "${projectDir}/res"
    dmgDir = "${projectDir}/dmg"
    pkgDir = "${projectDir}/packages"
    brewDir = "${pkgDir}/homebrew"
    debDir = "${pkgDir}/debian"
    rpmDir = "${pkgDir}/rpm"
    winDir = "${pkgDir}/windows"

    buildLaunch4j = "$buildDir/launch4j"

    buildPkgDir = "${buildDir}/packages"
    buildBrewDir = "${buildPkgDir}/homebrew"
    buildDebDir = "${buildPkgDir}/debian"
    buildRpmDir = "${buildPkgDir}/rpm"
    buildWinDir = "${buildPkgDir}/windows"

    packagePreamble = "${project.readableName}-${project.version}"
    rpmPackageName = "${packagePreamble}.rpm"
    debPackageName = "${packagePreamble}.deb"
    brewZipName = "${packagePreamble}-brew.zip"
    windowsZipName = "${packagePreamble}-win.zip"

    // Icons
    hmqIco = "${iconsDir}/05-mqtt-cli-icon.ico"
    hmqLogo = "${iconsDir}/05-mqtt-cli-icon.png"

    // Vendor details

    copyright = "Copyright 2019 HiveMQ and the HiveMQ Community"
    vendor = "HiveMQ GmbH"
    website = "https://www.hivemq.com/"
    license = "${projectDir}/LICENSE"

    // Dependency versions

    picoclishell3Version = "4.6.1"
    picocliVersion = "4.6.1"
    jline3Version = "3.19.0"
    jline3JansiVersion = "3.19.0"
    daggerVersion = "2.34.1"
    guavaVersion = "30.1.1-jre"
    hivemqclientVersion = "1.2.2"
    tinylogVersion = "2.0.1"
    jcToolsVersion = "2.1.2"
    jetbrainsAnnotationsVersion = "19.0.0"
    bouncycastleVersion = "1.68"
    nettyVersion = "4.1.63.Final"
    gsonVersion = "2.8.6"
    substrateVmVersion = "19.2.1"
    junitJupiterVersion = "5.7.1"
    openCsvVersion = "5.2"
    swaggerVersion = "1.6.2"
    findBugsVersion = "3.0.2"
    okHttpVersion = "3.14.7"
    gsonFireVersion = "1.8.4"
    javaxVersion = "1.3.2"
    commonsLangVersion = "3.10"
    mockitoVersion = "3.9.0"
    hivemqTestcontainerVersion = "1.3.2"
    mockWebserverVersion = "4.9.1"
    systemExitVersion = "1.1.1"
    testcontainersVersion = "1.15.3"
}


/****************
 * Dependencies *
 ***************/

dependencies {

    // hivemq client api dependencies
    implementation("io.swagger:swagger-annotations:${swaggerVersion}")
    implementation("com.google.code.findbugs:jsr305:${findBugsVersion}")
    implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
    implementation("com.squareup.okhttp3:logging-interceptor:${okHttpVersion}")
    implementation("io.gsonfire:gson-fire:${gsonFireVersion}")
    implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")
    implementation("javax.annotation:javax.annotation-api:${javaxVersion}")

    implementation("org.jline:jline:${jline3Version}")
    implementation("org.jline:jline-terminal-jansi:${jline3JansiVersion}")
    implementation("com.google.dagger:dagger:${daggerVersion}")
    compileOnly("com.oracle.substratevm:svm:${substrateVmVersion}")
    annotationProcessor("com.google.dagger:dagger-compiler:${daggerVersion}")

    implementation("info.picocli:picocli:${picocliVersion}")
    implementation("info.picocli:picocli-shell-jline3:${picoclishell3Version}")
    implementation("info.picocli:picocli-codegen:${picocliVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("com.google.code.gson:gson:${gsonVersion}")
    implementation("org.tinylog:tinylog-api:${tinylogVersion}")
    implementation("org.tinylog:tinylog-impl:${tinylogVersion}")
    implementation("org.jetbrains:annotations:${jetbrainsAnnotationsVersion}")
    implementation("org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}")
    implementation("org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}")
    implementation("com.hivemq:hivemq-mqtt-client:${hivemqclientVersion}")
    implementation("io.netty:netty-handler:${nettyVersion}")
    implementation("io.netty:netty-codec-http:${nettyVersion}")
    implementation("io.netty:netty-transport-native-epoll:${nettyVersion}:linux-x86_64")
    implementation("com.opencsv:opencsv:${openCsvVersion}")

    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testImplementation("com.squareup.okhttp3:mockwebserver:${mockWebserverVersion}")
    testImplementation("com.hivemq:hivemq-testcontainer-junit5:${hivemqTestcontainerVersion}")
    testImplementation("com.ginsberg:junit5-system-exit:${systemExitVersion}")
    testImplementation("org.testcontainers:testcontainers:${testcontainersVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

}

/**************
 * Compliance *
 **************/
configurations.implementation.setCanBeResolved(true)

downloadLicenses {
    ext.apache_2 = license("Apache License, Version 2.0", "https://opensource.org/licenses/Apache-2.0")
    ext.mit = license("MIT License", "https://opensource.org/licenses/MIT")
    ext.cddl_1_0 = license("CDDL, Version 1.0", "https://opensource.org/licenses/CDDL-1.0")
    ext.cddl_1_1 = license("CDDL, Version 1.1", "https://oss.oracle.com/licenses/CDDL+GPL-1.1")
    ext.lgpl_2_0 = license("LGPL, Version 2.0", "https://opensource.org/licenses/LGPL-2.0")
    ext.lgpl_2_1 = license("LGPL, Version 2.1", "https://opensource.org/licenses/LGPL-2.1")
    ext.lgpl_3_0 = license("LGPL, Version 3.0", "https://opensource.org/licenses/LGPL-3.0")
    ext.epl_1_0 = license("EPL, Version 1.0", "https://opensource.org/licenses/EPL-1.0")
    ext.epl_2_0 = license("EPL, Version 2.0", "https://opensource.org/licenses/EPL-2.0")
    ext.edl_1_0 = license("EDL, Version 1.0", "https://www.eclipse.org/org/documents/edl-v10.php")
    ext.bsd_3clause = license("BSD 3-Clause License", "https://opensource.org/licenses/BSD-3-Clause")
    ext.bouncycastle = license("Bouncy Castle Licence", "https://www.bouncycastle.org/licence.html")
    ext.w3c = license("W3C License", "https://opensource.org/licenses/W3C")
    ext.cc0 = license("CC0", "https://creativecommons.org/publicdomain/zero/1.0/")

    aliases = [
            (apache_2)    : ["Apache 2",
                             "Apache-2.0",
                             "Apache 2.0",
                             "Apache License 2.0",
                             "Apache License v2.0",
                             "Apache License Version 2.0",
                             "Apache License, Version 2.0",
                             "Apache License, version 2.0",
                             "The Apache License, Version 2.0",
                             "Apache Software License - Version 2.0",
                             "Apache Software License, version 2.0",
                             "The Apache Software License, version 2.0",
                             "The Apache Software License, Version 2.0"],
            (mit)         : ["MIT License",
                             "MIT license",
                             "The MIT License"],
            (cddl_1_0)    : ["CDDL, Version 1.0",
                             "Common Development and Distribution License 1.0",
                             "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0",
                             license("CDDL", "https://glassfish.dev.java.net/public/CDDLv1.0.html")],
            (cddl_1_1)    : ["CDDL 1.1",
                             "CDDL, Version 1.1",
                             "Common Development And Distribution License 1.1",
                             "CDDL+GPL License",
                             "CDDL + GPLv2 with classpath exception",
                             "Dual license consisting of the CDDL v1.1 and GPL v2",
                             "CDDL or GPLv2 with exceptions",
                             "CDDL/GPLv2+CE"],
            (lgpl_2_0)    : ["LGPL, Version 2.0",
                             "GNU General Public License, version 2"],
            (lgpl_2_1)    : ["LGPL, Version 2.1",
                             "LGPL, version 2.1",
                             license("GNU Lesser General Public License", "http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html")],
            (lgpl_3_0)    : ["LGPL, Version 3.0",
                             "Lesser General Public License, version 3 or greater"],
            (epl_1_0)     : ["EPL, Version 1.0",
                             "Eclipse Public License - v 1.0",
                             "Eclipse Public License - Version 1.0",
                             license("Eclipse Public License", "http://www.eclipse.org/legal/epl-v10.html")],
            (epl_2_0)     : ["EPL 2.0",
                             "EPL, Version 2.0"],
            (edl_1_0)     : ["EDL 1.0",
                             "EDL, Version 1.0",
                             "Eclipse Distribution License - v 1.0"],
            (bsd_3clause) : ["BSD 3-clause",
                             "BSD-3-Clause",
                             "BSD 3-Clause License",
                             "3-Clause BSD License",
                             "New BSD License",
                             license("BSD", "http://asm.ow2.org/license.html")],
            (bouncycastle): ["Bouncy Castle Licence"],
            (w3c)         : ["W3C License",
                             "W3C Software Copyright Notice and License",
                             "The W3C Software License"],
            (cc0)         : ["CC0",
                             "Public Domain"]
    ]

    dependencyConfiguration = "implementation"
    includeProjectDependencies = true
}

license {
    include "**/*.java"
    exclude "**/com/hivemq/cli/openapi/**"
    header = file("HEADER")
}


tasks.register("updateThirdPartyLicenses") {
    group "license"
    dependsOn ":downloadLicenses"
    doLast {
        javaexec {
            main = "-jar"
            args = ["${rootDir}/gradle/tools/license-third-party-tool-3.0.jar",
                    "The MQTT Cli",
                    "${buildDir}/reports/license/dependency-license.xml",
                    "${buildDir}/packaging/third-party-licenses/licenses",
                    "${buildDir}/packaging/third-party-licenses/licenses.html"
            ]
        }
    }
}

tasks.forbiddenApisMain {
    exclude "**/LoggingBootstrap.class"
}

forbiddenApis {
    bundledSignatures = ["jdk-deprecated", "jdk-non-portable", "jdk-reflection"]
    ignoreFailures = false
}

//disable
tasks.forbiddenApisTest.enabled = false

/****************
 * Jar *
 ***************/

tasks.compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.encoding = "UTF-8"

    def jv = System.properties["java.version"]
    if (jv.startsWith("6") || jv.startsWith("7")) {
        throw new RuntimeException("Incompatible JRE version: " + System.properties["java.version"] + ". Use at least JRE 8 instead.")
    }
}

tasks.jar {

    manifest() {
        attributes(
                "Built-JDK": System.getProperty("java.version"),
                "Implementation-Title": project.appName,
                "Implementation-Version": project.version,
                "Implementation-Vendor": project.vendor,
                "Specification-Title": project.appName,
                "Specification-Version": project.version,
                "Specification-Vendor": project.vendor,
                "Main-Class": application.mainClassName,
                // "Class-Path": configurations.compile.collect { "lib/" + it.getName() }.join(" "),
                "Built-Date": new Date().format("yyyy-MM-dd HH:mm:ss"),
                // "SplashScreen-Image": "mqtt-logo.svg",
                // "Sealed": "true"
        )
    }

    from(configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    finalizedBy shadowJar
}

tasks.shadowJar {
    archiveClassifier = ""
}


/****************
 * Tests *
 ***************/

tasks.compileTestJava {
    options.encoding = "UTF-8"
}


tasks.test {
    useJUnitPlatform()
}

/****************
 * Graal *
 ***************/

graal {
    graalVersion "19.2.1"
    outputName "${rootProject.name}"
    mainClass application.mainClassName
    option "-H:+PrintClassInitialization"
    option "-H:ReflectionConfigurationFiles=tools/reflection.json"
    option "-H:-UseServiceLoaderFeature"
    option "-H:IncludeResources=\"org/jline/utils/*.*"
    option "-H:IncludeResources=\"org/jline/terminal/*.*"
    option "--allow-incomplete-classpath"
    option "--report-unsupported-elements-at-runtime"
    option "--initialize-at-build-time"
    option "--initialize-at-run-time=" +
            "io.netty.channel.unix.Errors," +
            "io.netty.channel.unix.IovArray," +
            "io.netty.channel.unix.Limits," +
            "io.netty.channel.unix.Socket," +
            "io.netty.channel.epoll.EpollEventArray," +
            "io.netty.channel.epoll.EpollEventLoop," +
            "io.netty.channel.epoll.Native," +
            "io.netty.handler.ssl.ConscryptAlpnSslEngine," +
            "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator," +
            "io.netty.handler.ssl.JettyNpnSslEngine," +
            "io.netty.handler.ssl.ReferenceCountedOpenSslEngine," +
            "io.netty.handler.ssl.ReferenceCountedOpenSslContext," +
            "io.netty.handler.codec.http.HttpObjectEncoder," +
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder," +
            "com.hivemq.client.internal.mqtt.codec.encoder.MqttPingReqEncoder," +
            "com.hivemq.client.internal.mqtt.codec.encoder.mqtt3.Mqtt3DisconnectEncoder"
}

/****************
 * Homebrew Package & Formula *
 ***************/

tasks.register("buildPackageBrew", Zip) {
    dependsOn(tasks.shadowJar)

    archiveFileName = brewZipName
    destinationDirectory = file(project.buildBrewDir)

    into("brew") {
        from shadowJar.archiveFile
        from "$brewDir/mqtt"
    }

    from(projectDir) {
        include "LICENSE"
        into "licenses"
    }
}


tasks.register("buildBrewFormula", Copy) {
    dependsOn(tasks.buildPackageBrew)

    from "$brewDir/mqtt-cli.rb"
    into "$buildBrewDir"

    doLast {
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@description@@", value: project.description)
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@version@@", value: project.version)
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@filename@@", value: buildPackageBrew.archiveFileName.get())
        ant.replace(file: "$buildBrewDir/mqtt-cli.rb", token: "@@shasum@@", value: checkSum(buildPackageBrew.archiveFile.get().getAsFile()))
    }

}

/****************
 * Debian & RPM Packages *
 ***************/

ospackage {
    packageName project.readableName
    version project.version

    url project.website

    summary "MQTT Command Line Interface for interacting with a MQTT broker"
    packageDescription project.description
    license "apache2"
    packager ""
    vendor project.vendor

    os LINUX
    type BINARY

    user "root"
    permissionGroup "root"

    into "/opt/$packageName"
    from(shadowJar.outputs.files)
    from(configurations.runtime) {
        into "lib"
    }
    from("lib") {
        into "lib"
    }
    from(projectDir) {
        include "LICENSE"
        into "licenses"
        fileType LICENSE
    }
    from(debDir) {
        include "mqtt"
        fileMode 0755
        filter {
            it.replaceAll("@@jarPath@@", "/opt/${packageName}/${shadowJar.archiveFileName.get()}")
        }
    }


    link("/usr/bin/mqtt", "/opt/$packageName/mqtt", 0755)

}

buildDeb {
    requires("default-jre").or("java8-runtime")
}

buildRpm {
    arch NOARCH
    release "1"
    requires("jre", "1.8.0", GREATER | EQUAL)
}

tasks.register("buildDebianPackage", Copy) {
    from buildDeb
    into project.buildDebDir
    include "*.deb"
    rename { String filename ->
        filename = debPackageName
    }
}

tasks.register("buildRpmPackage", Copy) {
    from buildRpm
    into project.buildRpmDir
    include "*.rpm"
    rename { String filename ->
        filename = rpmPackageName
    }
}

/****************
 * Windows Zipping *
 ***************/

launch4j {
    outputDir = "packages/windows"
    headerType = "console"
    mainClassName = application.mainClassName
    icon = project.hmqIco
    jar = "lib/${project.tasks.shadowJar.archiveFileName.get()}"
    outfile = project.appExe
    copyright = project.copyright
    companyName = project.vendor
    downloadUrl = "https://openjdk.java.net/install/"
    jreMinVersion = "1.8"
    windowTitle = project.appName
    version = project.version
    textVersion = project.version
}

tasks.register("buildWindowsZip", Zip) {
    dependsOn createExe

    archiveFileName = windowsZipName
    destinationDirectory = file(project.buildWinDir)

    from("${project.winDir}") {
        include "*"
        filter { line ->
            line.replace("@@exeName@@", project.appExe)
        }
    }
    from launch4j.dest
    from project.license
}

/****************
 * Package Task *
 ***************/

tasks.create("buildPackageAll") {
    dependsOn(tasks.buildBrewFormula, tasks.buildDebianPackage, tasks.buildRpmPackage, tasks.buildWindowsZip)
}

/****************
 * Publish Draft-Release with all packages to GitHub Releases*
 ***************/

githubRelease {
    token "" + System.getenv("githubToken")
    owner = project.githubOrg
    targetCommitish "master"
    body ""
    draft true
    prerelease false
    releaseAssets jar.archiveFile,
            file("${project.buildRpmDir}/$rpmPackageName"),
            file("${project.buildDebDir}/$debPackageName"),
            file("${project.buildBrewDir}/$brewZipName"),
            buildWindowsZip
    allowUploadToExisting true
}

/****************
 * Update the Homebrew-Formula with the newly built package *
 ***************/

gitPublish {
    repoUri = "https://github.com/hivemq/homebrew-mqtt-cli.git"

    branch = "master"

    contents {
        from(project.buildBrewDir) {
            include "mqtt-cli.rb"
        }
    }

    // message used when committing changes
    commitMessage = "Release version v${project.version}"
}


tasks.githubRelease.dependsOn tasks.buildPackageAll


/****************
 * Helpers *
 ***************/

import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

import java.security.DigestInputStream
import java.security.MessageDigest
import java.util.regex.Pattern

static def checkSum(File file) {
    file.withInputStream {
        new DigestInputStream(it, MessageDigest.getInstance("SHA-256")).withStream {
            it.eachByte {}
            it.messageDigest.digest().encodeHex() as String
        }
    }
}

/*************************
 * Platform Distribution *
 *************************/

distributions {
    shadow {
        distributionBaseName = "mqtt-cli"
        contents {
            from "README.txt"
            from "build/packaging"
        }
    }
}

shadowDistZip {
    dependsOn(updateThirdPartyLicenses)
}

/*************************
 * HiveMQ platform build *
 *************************/

tasks.register("deleteOldSpecs", Delete) {
    delete fileTree("specs") {
        include "**/*.yaml"
    }
}

if (gradle.includedBuilds.find { it.name == "hivemq-enterprise" } != null) {
    tasks.register("copyHiveMQSpec", Copy) {
        dependsOn(gradle.includedBuild("hivemq-enterprise").task(":openApiSpec"))
        mustRunAfter(tasks.deleteOldSpecs)

        from("../hivemq-enterprise/build/openapi") {
            include { Pattern.compile(".*${version}-OpenAPI-spec.yaml").matcher(it.name).matches() }
        }
        into "specs"
    }
}

if (gradle.includedBuilds.find { it.name == "hivemq-enterprise" } != null) {
    task updateSpecs {
        dependsOn deleteOldSpecs
        dependsOn copyHiveMQSpec
        copyHiveMQSpec.mustRunAfter(deleteOldSpecs)

        doLast {
            def gradleProperties = new File("${project.projectDir}/gradle.properties")
            def text = gradleProperties.text

            text = text.replaceAll("(?m)^hivemq-api\\.version=.+", "hivemq-api.version=${version}")

            gradleProperties.write(text)
        }
    }
}


if (gradle.includedBuilds.find { it.name == "plugins" } != null) {
    apply plugin: "com.hivemq.version-updater"
    project.ext.set("versionUpdaterFiles", ["doc/docs/installation.md"])
}