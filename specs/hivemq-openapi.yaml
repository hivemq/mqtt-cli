openapi: 3.0.1
info:
  contact:
    url: https://www.hivemq.com
  description: "\n# Introduction\n\nHiveMQ's REST API provides endpoints for the following\
    \ use cases:\n- Listing all MQTT Clients\n- Getting detailed information about\
    \ a specific MQTT client\n- Listing all subscriptions for a specific MQTT client\n\
    - Getting the connection status for a specific MQTT client\n- Creating and restoring\
    \ a backup\n- Starting and stopping a trace recording\n- Downloading backups and\
    \ trace recordings\n\n## API style\nHiveMQ's API is organized in a [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer)\
    \ fashion.\n\nThe API has predictable resource-oriented URLs that consume and\
    \ return JSON with the content-type `application/json`.\nIt uses standard HTTP\
    \ response codes and verbs. Some endpoints do return files, those are using the\
    \ content type `application/octet-stream` or `application/zip`.\n\nThe base URL\
    \ is the Host and configured port of your HiveMQ instances. In most cases it makes\
    \ sense to configure a reverse-proxy or load balancer to access HiveMQ's REST\
    \ API.\n\n## Pagination\nSome endpoints support returning the results in a paginated\
    \ fashion. In those cases a cursor can be returned that contains the relative\
    \ URL for the next page.\nThe desired page size can be specified by using the\
    \ `limit` query parameter.\n\nExample URL: `http://my-broker-host:8888/api/v1/mqtt/clients?limit=100`\n\
    \nExample Response:\n```\n{\n  \"items\": [\n    {\n      \"id\": \"client-id-1\"\
    \n    },\n\n    ...\n\n    {\n      \"id\": \"client-id-99\"\n    }\n  ],\n  \"\
    _links\": {\n    \"next\": \"/api/v1/mqtt/clients?cursor=a-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=&limit=100\"\
    \n  }\n}\n```\nTo fetch the next page with more results, the URL `http://my-broker-host:8888/api/v1/mqtt/clients?cursor=a-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=&limit=100`\
    \ is called.\nIf the value for `_links.next` is not present, then this is the\
    \ last page and no further pages are available.\n\n**Note**: If a generated REST\
    \ API client is used the cursor value must be extracted from the `next URL` and\
    \ then\npassed as the cursor in the API call for fetching the next page.\n\nSteps\
    \ to use pagination in a REST API client:\n1. Returned next URL:\n```\nhttp://my-broker-host:8888/api/v1/mqtt/clients?cursor=a-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=&limit=100\n\
    ```\n\n2. Extract the cursor from the next URL:\n```\na-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=\n\
    ```\n\n3. Use the cursor in the REST API client to fetch the next page:\n```\n\
    restClient.mqttClientsGet(pageLimitForRequest, \"a-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=\"\
    );\n```\n\n## Errors\nConventional HTTP response codes are used to indicate the\
    \ success or failure of an API request. Codes in the 2xx range generally indicate\
    \ success. Codes in the 4xx range indicate an error that failed given the information\
    \ provided (e.g., a required parameter was omitted). Codes in the 5xx range indicate\
    \ an error on the server side.\n\nFor all errors a JSON response with additional\
    \ details is returned in the format [Problem JSON](https://tools.ietf.org/html/rfc7807).\n\
    \n## OpenAPI\nHiveMQ's REST API provides an OpenAPI 3.0 schema definition that\
    \ can imported into popular API tooling (e.g. Postman) or can be used to generate\
    \ client-code for multiple programming languages.\n"
  title: HiveMQ REST API
  version: 4.16.0-SNAPSHOT
  x-logo:
    url: https://www.hivemq.com/img/svg/hivemq-bee.svg
tags:
- description: "These endpoints can be used to create, download, inspect and restore\
    \ backups created by HiveMQ.\n\nMore information about the backup and restore\
    \ capabilities of HiveMQ can be found in the [HiveMQ documentation](https://www.hivemq.com/docs/hivemq/latest/user-guide/backup-restore.html).\n\
    \n### Backup Requirements\nSome prerequisites are necessary to create a backup\
    \ or restore from a backup:\n\n- All HiveMQ nodes have at least version 4.4.0\n\
    - Only one backup/restore can be executed at the same time\n\n### Export Requirements\n\
    The following requirements are necessary to successfully create a backup:\n\n\
    - All HiveMQ nodes have at least 1GB of free disk space\n- No cluster topology\
    \ changes occur during the export. The backup is aborted when the topology changes\
    \ to avoid inconsistent data in the backup.\n\n\n### Restore Requirements\n\n\
    The requirements to successfully restore data from a backup are:\n\n- A clean\
    \ HiveMQ deployment. This means that no clients must be connected and no persistent\
    \ data exists on every HiveMQ node. The import will not start if there is data\
    \ available in your cluster.\n- Message data used by Extensions are only restored\
    \ if the corresponding extension is already started before the restore is started."
  name: Backup & Restore
- description: "This endpoint can be used to create diagnostic archives.\n\nMore information\
    \ about the diagnostic archive can be found in the [HiveMQ documentation](https://www.hivemq.com/docs/hivemq/latest/control-center/diagnostic-archive.html).\n\
    \n### Diagnostic Archive Requirements\nSome prerequisites are necessary to create\
    \ a diagnostic archive:\n\n- Only HiveMQ nodes with at least version 4.11.0 will\
    \ create an archive\n- Only one diagnostic archive can be created at the same\
    \ time"
  name: Diagnostic Archive
- description: "A Trace Recording is a combination of filters which allows you to\
    \ select messages of specific clients or topics, which are logged to a file in\
    \ a human readable format.\nEach trace recording creates cluster-wide trace files\
    \ that can be downloaded as a collective zip file.\n\nYou can log any MQTT message\
    \ sent or received by the broker with a filter you apply. A Filter can either\
    \ be a client identifier or a topic. Many filter combinations are possible. All\
    \ filters are regular expressions.\n\nThese endpoints can be used to create, download,\
    \ inspect, stop and delete trace recordings.\n\nMore information about the trace\
    \ recording capabilities of HiveMQ can be found in the [HiveMQ documentation](https://www.hivemq.com/docs/hivemq/latest/control-center/analytic.html#trace-recording).\n"
  name: Trace Recordings
- description: "These endpoints can be used to inspect the MQTT clients that are known\
    \ to HiveMQ.\n\nWith millions of connected clients, keeping track of specific\
    \ clients can become a challenge. The HiveMQ REST API provides endpoints to list\
    \ and view all the MQTT clients known to HiveMQ. \nInformation about subscriptions,\
    \ connection status, TLS, and more, offer detailed insights into every client."
  name: MQTT Clients
paths:
  /api/v1/data-validation/policies:
    get:
      description: "Get all policies. \n\n This endpoint returns the content of the\
        \ policies with the content-type `application/json`. \n\n This endpoint requires\
        \ at least HiveMQ version 4.15.0 on all cluster nodes."
      operationId: getAllPolicies
      parameters:
      - description: "Comma-separated list of fields to include in the response. Allowed\
          \ values are: id, createdAt, matching, validation, onSuccess, onFailure"
        example: "id,createdAt"
        in: query
        name: fields
        schema:
          type: string
          example: null
      - description: Comma-separated list of policy ids used for filtering. Multiple
          filters can be applied together.
        example: "policy1,policy2"
        in: query
        name: policyIds
        schema:
          type: string
          example: null
      - description: Comma-separated list of schema ids used for filtering. Multiple
          filters can be applied together.
        example: "schema1,schema2"
        in: query
        name: schemaIds
        schema:
          type: string
          example: null
      - description: MQTT topic string that is matched by the retrieved policies.
          Returned policies are sorted in the same way as they are applied to matching
          publishes. 'topic' filtering does not support pagination
        example: topic/my-topic
        in: query
        name: topic
        schema:
          type: string
          example: null
      - description: Specifies the page size for the returned results. Has to be between
          10 and 500. Default page size is 50. Limit is ignored if the 'topic' query
          parameter is set.
        example: 100
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          example: null
      - description: The cursor that has been returned by the previous result page.
          Do not pass this parameter if you want to fetch the first page.
        in: query
        name: cursor
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                list-response-a:
                  description: Example response with multiple policies. No more pages
                    left
                  summary: "Multiple results, last page"
                  value:
                    items:
                    - id: policy1
                      createdAt: 2023-04-26T13:32:47.032Z
                      matching:
                        topicFilter: topic1
                      validation:
                        validators:
                        - type: schema
                          arguments:
                            strategy: ALL_OF
                            schemas:
                            - schemaId: schema
                      onSuccess:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: DEBUG
                            message: $clientId sent a publish on topic '$topic' with
                              result '$validationResult'
                      onFailure:
                        pipeline:
                        - id: logFailureOperation
                          functionId: log
                          arguments:
                            level: WARN
                            message: $clientId sent an invalid publish on topic '$topic'
                              with result '$validationResult'
                    - id: policy2
                      createdAt: 2023-04-26T13:32:47.049Z
                      matching:
                        topicFilter: topic2
                      validation:
                        validators:
                        - type: schema
                          arguments:
                            strategy: ALL_OF
                            schemas:
                            - schemaId: schema
                      onSuccess:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: DEBUG
                            message: $clientId sent a publish on topic '$topic' with
                              result '$validationResult'
                      onFailure:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: WARN
                            message: $clientId sent an invalid publish on topic '$topic'
                              with result '$validationResult'
                list-response-b:
                  description: Example response with multiple policies. More pages
                    left
                  summary: "Multiple results, more pages left"
                  value:
                    items:
                    - id: policy1
                      createdAt: 2023-04-26T13:32:47.032Z
                      matching:
                        topicFilter: topic1
                      validation:
                        validators:
                        - type: schema
                          arguments:
                            strategy: ALL_OF
                            schemas:
                            - schemaId: schema
                      onSuccess:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: DEBUG
                            message: $clientId sent a publish on topic '$topic' with
                              result '$validationResult'
                      onFailure:
                        pipeline:
                        - id: logFailureOperation
                          functionId: log
                          arguments:
                            level: WARN
                            message: $clientId sent an invalid publish on topic '$topic'
                              with result '$validationResult'
                    - id: policy2
                      createdAt: 2023-04-26T13:32:47.049Z
                      matching:
                        topicFilter: topic2
                      validation:
                        validators:
                        - type: schema
                          arguments:
                            strategy: ALL_OF
                            schemas:
                            - schemaId: schema
                      onSuccess:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: DEBUG
                            message: $clientId sent a publish on topic '$topic' with
                              result '$validationResult'
                      onFailure:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: WARN
                            message: $clientId sent an invalid publish on topic '$topic'
                              with result '$validationResult'
                    - id: policy3
                      createdAt: 2023-04-26T13:32:47.049Z
                      matching:
                        topicFilter: topic3
                      validation:
                        validators:
                        - type: schema
                          arguments:
                            strategy: ALL_OF
                            schemas:
                            - schemaId: schema
                      onSuccess:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: DEBUG
                            message: $clientId sent a publish on topic '$topic' with
                              result '$validationResult'
                      onFailure:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: WARN
                            message: $clientId sent an invalid publish on topic '$topic'
                              with result '$validationResult'
                    _links:
                      next: /api/v1/data-validation/policies?cursor=a-eqj-GE9B5DkV-nhwVBk-nTL807ty&limit=3
                list-response-c:
                  description: Example response with requested fields and multiple
                    policies. More pages left
                  summary: "Multiple results, requested 'id' field"
                  value:
                    items:
                    - id: policy1
                    - id: policy2
                    - id: policy3
                    _links:
                      next: /api/v1/data-validation/policies?cursor=a-eqj-GE9B5DkV-nhwVBk-nTL807ty&limit=3&fields=id
                list-response-d:
                  description: Example response with a single policy
                  summary: Single Result
                  value:
                    items:
                    - id: policy1
                      createdAt: 2023-04-26T13:32:47.032Z
                      matching:
                        topicFilter: topic1
                      validation:
                        validators:
                        - type: schema
                          arguments:
                            strategy: ALL_OF
                            schemas:
                            - schemaId: schema
                      onSuccess:
                        pipeline:
                        - id: logSuccessOperation
                          functionId: log
                          arguments:
                            level: DEBUG
                            message: $clientId sent a publish on topic '$topic' with
                              result '$validationResult'
                      onFailure:
                        pipeline:
                        - id: logFailureOperation
                          functionId: log
                          arguments:
                            level: WARN
                            message: $clientId sent an invalid publish on topic '$topic'
                              with result '$validationResult'
              schema:
                $ref: '#/components/schemas/PolicyList'
          description: Success
        "503":
          content:
            application/json:
              examples:
                version-check-failed:
                  description: Version check failed
                  summary: Version check failed
                  value:
                    errors:
                    - title: Endpoint not active yet
                      detail: "Not all cluster nodes support this endpoint yet, please\
                        \ try again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not all cluster nodes at minimum version
      summary: Get all policies
      tags:
      - Policies
    post:
      description: |-
        Create a policy

        This endpoint requires at least HiveMQ version 4.15.0 on all cluster nodes.
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            example:
              id: policy1
              matching:
                topicFilter: topic/+
              validation:
                validators:
                - type: schema
                  arguments:
                    strategy: ALL_OF
                    schemas:
                    - schemaId: schema1
              onSuccess:
                pipeline:
                - id: logOperationSuccess
                  functionId: log
                  arguments:
                    level: DEBUG
                    message: $clientId sent a publish on topic '$topic' with result
                      '$validationResult'
              onFailure:
                pipeline:
                - id: logOperationFailure
                  functionId: log
                  arguments:
                    level: WARN
                    message: $clientId sent an invalid publish on topic '$topic' with
                      result '$validationResult'
            schema:
              $ref: '#/components/schemas/Policy'
        description: The policy that should be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response-example:
                  description: Example response.
                  summary: Policy was created successfully
                  value:
                    id: policy1
                    createdAt: 2023-04-19T13:35:00.930Z
                    matching:
                      topicFilter: topic/+
                    validation:
                      validators:
                      - type: schema
                        arguments:
                          strategy: ALL_OF
                          schemas:
                          - schemaId: schema1
                    onSuccess:
                      pipeline:
                      - id: logOperationSuccess
                        functionId: log
                        arguments:
                          level: DEBUG
                          message: $clientId sent a publish on topic '$topic' with
                            result '$validationResult'
                    onFailure:
                      pipeline:
                      - id: logOperationFailure
                        functionId: log
                        arguments:
                          level: WARN
                          message: $clientId sent an invalid publish on topic '$topic'
                            with result '$validationResult'
              schema:
                $ref: '#/components/schemas/Policy'
          description: Success
        "400":
          content:
            application/json:
              examples:
                policy-id-already-in-use:
                  description: Bad request
                  summary: The given policy id is already in use
                  value:
                    errors:
                    - title: Policy id already used
                      detail: The given policy id 'policy-id' is already in use.
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: Create a new policy
      tags:
      - Policies
  /api/v1/data-validation/policies/{policyId}:
    delete:
      description: "Deletes an existing policy. \n\n "
      operationId: deletePolicy
      parameters:
      - description: The id of the policy to delete.
        example: policy1
        in: path
        name: policyId
        required: true
        schema:
          type: string
          example: null
      responses:
        "204":
          description: "Success, no response body"
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
        "503":
          content:
            application/json:
              examples:
                version-check-failed:
                  description: Version check failed
                  summary: Version check failed
                  value:
                    errors:
                    - title: Endpoint not active yet
                      detail: "Not all cluster nodes support this endpoint yet, please\
                        \ try again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not all cluster nodes at minimum version
      summary: Delete a policy
      tags:
      - Policies
    get:
      description: "Get a specific policy. \n\n This endpoint returns the content\
        \ of the policy with the content-type `application/json`. \n\n This endpoint\
        \ requires at least HiveMQ version 4.15.0 on all cluster nodes."
      operationId: getPolicy
      parameters:
      - description: The id of the policy.
        example: policy1
        in: path
        name: policyId
        required: true
        schema:
          type: string
          example: null
      - description: "Comma-separated list of fields to include in the response. Allowed\
          \ values are: id, createdAt, matching, validation, onSuccess, onFailure"
        example: "id,createdAt"
        in: query
        name: fields
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                get-response:
                  description: Get Policy
                  summary: Get Policy
                  value:
                    id: policy1
                    createdAt: 2023-04-19T13:35:00.930Z
                    matching:
                      topicFilter: topic/+
                    validation:
                      validators:
                      - type: schema
                        arguments:
                          strategy: ALL_OF
                          schemas:
                          - schemaId: schema1
                    onSuccess:
                      pipeline:
                      - id: logOperationSuccess
                        functionId: log
                        arguments:
                          level: DEBUG
                          message: $clientId sent a publish on topic '$topic' with
                            result '$validationResult'
                    onFailure:
                      pipeline:
                      - id: logOperationFailure
                        functionId: log
                        arguments:
                          level: WARN
                          message: $clientId sent an invalid publish on topic '$topic'
                            with result '$validationResult'
              schema:
                $ref: '#/components/schemas/Policy'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Get a policy
      tags:
      - Policies
  /api/v1/data-validation/schemas:
    get:
      description: "Get all schemas. \n\n This endpoint returns the content of the\
        \ schemas with the content-type `application/json`. \n\n This endpoint requires\
        \ at least HiveMQ version 4.16.0 on all cluster nodes."
      operationId: getAllSchemas
      parameters:
      - description: "Comma-separated list of fields to include in the response. Allowed\
          \ values are: id, type, schemaDefinition, createdAt"
        example: "id,createdAt"
        in: query
        name: fields
        schema:
          type: string
          example: null
      - description: Comma-separated list of schema types used for filtering. Multiple
          filters can be applied together.
        example: "JSON,PROTOBUF"
        in: query
        name: types
        schema:
          type: string
          example: null
      - description: Comma-separated list of schema ids used for filtering. Multiple
          filters can be applied together.
        example: "schema1,schema2"
        in: query
        name: schemaIds
        schema:
          type: string
          example: null
      - description: Specifies the page size for the returned results. Has to be between
          10 and 500. Default page size is 50.
        example: 100
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          example: null
      - description: The cursor that has been returned by the previous result page.
          Do not pass this parameter if you want to fetch the first page.
        in: query
        name: cursor
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                list-response-a:
                  description: Example response with multiple schemas. No more pages
                    left
                  summary: "Multiple results, last page"
                  value:
                    items:
                    - id: schema1
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:28:35.164Z
                    - id: schema2
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:38:35.164Z
                    - id: schema3
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:48:35.164Z
                list-response-b:
                  description: Example response with multiple schemas. More pages
                    left
                  summary: "Multiple results, more pages left"
                  value:
                    items:
                    - id: schema1
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:28:35.164Z
                    - id: schema2
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:38:35.164Z
                    - id: schema3
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:48:35.164Z
                    _links:
                      next: /api/v1/data-validation/schemas?cursor=a-eqj-GE9B5DkV-nhwVBk-nTL807ty&limit=3
                list-response-c:
                  description: Example response with requested fields and multiple
                    schemas. More pages left
                  summary: "Multiple results, requested 'id' field"
                  value:
                    items:
                    - id: schema1
                    - id: schema2
                    - id: schema3
                    _links:
                      next: /api/v1/data-validation/schemas?cursor=a-eqj-GE9B5DkV-nhwVBk-nTL807ty&limit=3&fields=id
                list-response-d:
                  description: Example response with a single schema
                  summary: Single Result
                  value:
                    items:
                    - id: schema1
                      type: JSON
                      schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                      createdAt: 2023-03-01T13:28:35.164Z
              schema:
                $ref: '#/components/schemas/SchemaList'
          description: Success
        "503":
          content:
            application/json:
              examples:
                version-check-failed:
                  description: Version check failed
                  summary: Version check failed
                  value:
                    errors:
                    - title: Endpoint not active yet
                      detail: "Not all cluster nodes support this endpoint yet, please\
                        \ try again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not all cluster nodes at minimum version
      summary: Get all schemas
      tags:
      - Schemas
    post:
      description: |-
        Creates a schema

        This endpoint requires at least HiveMQ version 4.15.0 on all cluster nodes.
      operationId: createSchema
      requestBody:
        content:
          application/json:
            example:
              id: schema1
              type: JSON
              schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
            schema:
              $ref: '#/components/schemas/Schema'
        description: The schema that should be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response-example:
                  description: Example response.
                  summary: Schema was created successfully
                  value:
                    id: schema1
                    type: JSON
                    schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                    createdAt: 2023-03-01T13:28:35.164Z
              schema:
                $ref: '#/components/schemas/Schema'
          description: Success
        "400":
          content:
            application/json:
              examples:
                schema-id-already-in-use:
                  description: Bad request
                  summary: The given schema id is already in use
                  value:
                    errors:
                    - title: Schema id already used
                      detail: The given schema id 'schema-id' is already in use.
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: Create a new schema
      tags:
      - Schemas
  /api/v1/data-validation/schemas/{schemaId}:
    delete:
      description: "Deletes an existing schema. \n\n "
      operationId: deleteSchema
      parameters:
      - description: The id of the schema to delete.
        example: schema1
        in: path
        name: schemaId
        required: true
        schema:
          type: string
          example: null
      responses:
        "204":
          description: "Success, no response body"
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
        "503":
          content:
            application/json:
              examples:
                version-check-failed:
                  description: Version check failed
                  summary: Version check failed
                  value:
                    errors:
                    - title: Endpoint not active yet
                      detail: "Not all cluster nodes support this endpoint yet, please\
                        \ try again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not all cluster nodes at minimum version
      summary: Delete a schema
      tags:
      - Schemas
    get:
      description: "Get a specific schema. \n\n This endpoint returns the content\
        \ of the schema with the content-type `application/json`. \n\n This endpoint\
        \ requires at least HiveMQ version 4.15.0 on all cluster nodes."
      operationId: getSchema
      parameters:
      - description: The id of the schema.
        example: schema1
        in: path
        name: schemaId
        required: true
        schema:
          type: string
          example: null
      - description: "Comma-separated list of fields to include in the response. Allowed\
          \ values are: id, type, schemaDefinition, createdAt"
        example: "id,type"
        in: query
        name: fields
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                get-response:
                  description: Get schema
                  summary: Get schema
                  value:
                    id: schema1
                    type: JSON
                    schemaDefinition: ewogICIkaWQiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZGRyZXNzLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgInN0cmVldF9hZGRyZXNzIjogeyAidHlwZSI6ICJzdHJpbmciIH0sCiAgICAiY2l0eSI6IHsgInR5cGUiOiAic3RyaW5nIiB9LAogICAgInN0YXRlIjogeyAidHlwZSI6ICJzdHJpbmciIH0KICB9LAogICJyZXF1aXJlZCI6IFsic3RyZWV0X2FkZHJlc3MiLCAiY2l0eSIsICJzdGF0ZSJdCn0=
                    createdAt: 2023-03-01T13:28:35.164Z
              schema:
                $ref: '#/components/schemas/Schema'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Get a schema
      tags:
      - Schemas
  /api/v1/management/backups:
    get:
      description: |-
        Lists all available backups with their current state.

        This endpoint can be used to get an overview over all backups that are in progress or can be restored.

        Canceled or failed backups are included in the results for up to 1 hour after they have been requested.

        This endpoint requires at least HiveMQ version 4.4.0. on all cluster nodes.
      operationId: getAllBackups
      responses:
        "200":
          content:
            application/json:
              examples:
                empty-results:
                  description: Empty result if no backups are known.
                  summary: Empty result if no backups are known
                  value:
                    items: []
                multiple-results:
                  description: Example response with one stored backup and one backup
                    that is currently in progress.
                  summary: Multiple results in different states
                  value:
                    items:
                    - id: 20200506-081317
                      createdAt: 2020-05-06T08:13:17Z
                      bytes: 85550653
                      state: COMPLETED
                    - id: 20201006-1902318
                      createdAt: 2020-05-06T08:13:17Z
                      state: IN_PROGRESS
                    - id: 20201006-1902318
                      createdAt: 2020-05-06T08:13:17Z
                      state: FAILED
                      failReason: Another backup is already in progress.
              schema:
                $ref: '#/components/schemas/BackupList'
          description: Success
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: List all available backups
      tags:
      - Backup & Restore
    post:
      description: |-
        Triggers the creation of a new backup.

        This endpoint requires at least HiveMQ version 4.4.0. on all cluster nodes.
      operationId: createBackup
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  description: Example response with in-progress backup.
                  summary: Created backup that is currently in progress
                  value:
                    backup:
                      id: 20201006-1902318
                      createdAt: 2020-05-06T08:13:17Z
                      state: IN_PROGRESS
              schema:
                $ref: '#/components/schemas/BackupItem'
          description: Success
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: Create a new backup
      tags:
      - Backup & Restore
  /api/v1/management/backups/{backupId}:
    get:
      description: |-
        Returns the information for a specific backup with its current state.

         This endpoint can be used to check the progress of a specific backup when it is being created or being restored.

          Canceled or failed backups are returned for up to 1 hour after the have been requested.

         This endpoint requires at least HiveMQ version 4.4.0. on all cluster nodes.
      operationId: getBackup
      parameters:
      - description: The id of the backup.
        in: path
        name: backupId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                get-example:
                  description: Example response.
                  summary: Example with a completed backup
                  value:
                    backup:
                      id: 20200506-081317
                      createdAt: 2020-05-06T08:13:17Z
                      bytes: 85550653
                      state: COMPLETED
              schema:
                $ref: '#/components/schemas/BackupItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: Get backup information
      tags:
      - Backup & Restore
    post:
      description: |-
        Triggers the restore of a stored backup.

        This endpoint requires at least HiveMQ version 4.4.0. on all cluster nodes.
      operationId: restoreBackup
      parameters:
      - description: The id of the backup.
        in: path
        name: backupId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  description: Example response.
                  summary: Created backup that is currently in progress
                  value:
                    backup:
                      id: 20201006-1902318
                      createdAt: 2020-05-06T08:13:17Z
                      state: IN_PROGRESS
              schema:
                $ref: '#/components/schemas/BackupItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Example not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: Restore a new backup
      tags:
      - Backup & Restore
  /api/v1/management/diagnostic-archives:
    post:
      description: Triggers the creation of a new diagnostic archive.
      operationId: createDiagnosticArchive
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  description: Example response with in-progress diagnostic archive
                    creation.
                  summary: Creation of a diagnostic archive that is currently in progress
                  value:
                    diagnosticArchive:
                      id: 20230201-192318
                      createdAt: 2023-01-02T08:13:17Z
                      state: IN_PROGRESS
              schema:
                $ref: '#/components/schemas/DiagnosticArchiveItem'
          description: Success
      summary: Create a new diagnostic archive
      tags:
      - Diagnostic Archive
  /api/v1/management/files/backups/{backupId}:
    get:
      description: "Download a specific backup file. \n\n This endpoint returns the\
        \ content of the backup file with the content-type `application/octet-stream`.\
        \ \n\n Only backups in the states `COMPLETED`, `RESTORE_IN_PROGRESS`, `RESTORE_FAILED`\
        \ or `RESTORE_COMPLETED` can be downloaded.\n\n This endpoint requires at\
        \ least HiveMQ version 4.4.0. on all cluster nodes."
      operationId: downloadBackupFile
      parameters:
      - description: The id of the backup.
        in: path
        name: backupId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/octet-stream:
              examples:
                file-download:
                  description: File download
                  summary: File download
                  value: <raw data>
              schema:
                type: string
                format: binary
                example: null
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
        "503":
          content:
            application/json:
              examples:
                temporarily-not-available:
                  description: The endpoint is temporarily not available
                  summary: Temporarily not available
                  value:
                    errors:
                    - title: The endpoint is temporarily not available
                      detail: "The endpoint is temporarily not available, please try\
                        \ again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Temporarily not available
      summary: Download a backup file
      tags:
      - Backup & Restore
  /api/v1/management/files/trace-recordings/{traceRecordingId}:
    get:
      description: "Download a specific trace recording. \n\n This endpoint returns\
        \ the content of the trace recording with the content-type `application/zip`.\
        \ \n\nOnly trace recordings in the states `IN_PROGRESS`, `STOPPED` and `ABORTED`\
        \ can be downloaded."
      operationId: downloadTraceRecordingFile
      parameters:
      - description: The id of the trace recording.
        in: path
        name: traceRecordingId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/zip:
              examples:
                file-download:
                  description: File download
                  summary: File download
                  value: <raw data>
              schema:
                type: string
                format: binary
                example: null
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Download a trace recording
      tags:
      - Trace Recordings
  /api/v1/management/trace-recordings:
    get:
      description: "Lists all known trace recordings. \n\nTrace recordings can be\
        \ in different states. These states are:\n- `SCHEDULED` if the start date\
        \ for a trace recording is in the future\n- `STOPPED` if a trace recording\
        \ has reached its end date or was stopped manually\n- `IN_PROGRESS` when the\
        \ trace recording is currently ongoing\n- `ABORTED` if the trace recording\
        \ was aborted by the server\n"
      operationId: getAllTraceRecordings
      responses:
        "200":
          content:
            application/json:
              examples:
                single-result:
                  description: Example response with one recording that is in progress.
                  summary: Single result
                  value:
                    items:
                    - name: test
                      startAt: 2020-07-23T12:07:30.000Z
                      endAt: 2020-07-23T13:07:30.000Z
                      clientIdFilters:
                      - regex: "client-[0-9]"
                      topicFilters:
                      - regex: topic/.*
                      events:
                      - MQTT_MESSAGE_CONNECT
                      - MQTT_MESSAGE_DISCONNECT
                      state: IN_PROGRESS
              schema:
                $ref: '#/components/schemas/TraceRecordingList'
          description: Success
      summary: Get all trace recordings
      tags:
      - Trace Recordings
    post:
      description: "Creates a new trace recording. \n\n To create a trace recording\
        \ you must specify a name, start date, end date, a set of filters and the\
        \ desired packets that should be traced.\n\nAt least one client or topic filter\
        \ and at least one packet is required to create a trace recording.\n\nThe\
        \ client and topic filters can be [regular expressions](https://www.hivemq.com/docs/hivemq/4.3/control-center/analytic.html#regular-expressions)."
      operationId: createTraceRecording
      requestBody:
        content:
          application/json:
            examples:
              simple-query:
                description: "A sample trace recording with a duration of 1 hour,\
                  \ tracing one client, topic filter and CONNECT events."
                summary: Simple query
                value:
                  traceRecording:
                    name: test
                    startAt: 2020-07-23T12:07:30.000Z
                    endAt: 2020-07-23T13:07:30.000Z
                    clientIdFilters:
                    - regex: "client-[0-9]"
                    topicFilters:
                    - regex: topic/.*
                    events:
                    - MQTT_MESSAGE_CONNECT
            schema:
              $ref: '#/components/schemas/TraceRecordingItem'
        description: The trace recording to create
      responses:
        "201":
          content:
            application/json:
              examples:
                simple-query-result:
                  description: Response from the server after it created the trace
                    recording. Includes the resulting current state of the recording.
                  summary: Simple query - result
                  value:
                    traceRecording:
                      name: test
                      startAt: 2020-07-23T12:07:30.000Z
                      endAt: 2020-07-23T13:07:30.000Z
                      clientIdFilters:
                      - regex: test
                      topicFilters:
                      - regex: test-topic
                      events:
                      - MQTT_MESSAGE_CONNECT
                      state: IN_PROGRESS
              schema:
                $ref: '#/components/schemas/TraceRecordingItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                body-param-missing:
                  description: Bad request
                  summary: Required body entity parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required body entity parameter is missing
                invalid-resource:
                  description: Bad request
                  summary: Invalid resource
                  value:
                    errors:
                    - title: Invalid resource
                      detail: "The fields {name, events, startAt, endAt} must be specified\
                        \ at creation"
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
      summary: Create a trace recording
      tags:
      - Trace Recordings
  /api/v1/management/trace-recordings/{traceRecordingId}:
    delete:
      description: "Deletes an existing trace recording. \n\n "
      operationId: deleteTraceRecording
      parameters:
      - description: The name of the trace recording to delete.
        in: path
        name: traceRecordingId
        required: true
        schema:
          type: string
          example: null
      responses:
        "204":
          description: "Success, no response body"
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Delete a trace recording
      tags:
      - Trace Recordings
    patch:
      description: "Stops an existing trace recording.\n\nOnly the state of the trace\
        \ recording can be set to `STOPPED` with this endpoint, changes to other fields\
        \ are ignored."
      operationId: stopTraceRecording
      parameters:
      - description: The name of the trace recording to patch/stop.
        in: path
        name: traceRecordingId
        required: true
        schema:
          type: string
          example: null
      requestBody:
        content:
          application/json:
            examples:
              stop-query:
                description: Request to stop a trace recording by defining its state
                  as STOPPED.
                summary: Stop query
                value:
                  traceRecording:
                    state: STOPPED
            schema:
              $ref: '#/components/schemas/TraceRecordingItem'
        description: The trace recording to change
      responses:
        "200":
          content:
            application/json:
              examples:
                stop-response:
                  description: A stopped trace recording returned after a stop query
                    was sent.
                  summary: Stop query - response
                  value:
                    traceRecording:
                      name: test
                      startAt: 2020-07-23T12:07:30.000Z
                      endAt: 2020-07-23T13:07:30.000Z
                      clientIdFilters:
                      - regex: test
                      topicFilters:
                      - regex: test-topic
                      events:
                      - MQTT_MESSAGE_CONNECT
                      state: STOPPED
              schema:
                $ref: '#/components/schemas/TraceRecordingItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                body-param-missing:
                  description: Bad request
                  summary: Required body entity parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required body entity parameter is missing
                invalid-resource:
                  description: Bad request
                  summary: Invalid resource
                  value:
                    errors:
                    - title: Invalid resource
                      detail: "The fields {name, events, startAt, endAt} must be specified\
                        \ at creation"
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Resource not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Stop a trace recording.
      tags:
      - Trace Recordings
  /api/v1/mqtt/clients:
    get:
      description: "Lists all client sessions (online and offline) known to the whole\
        \ HiveMQ cluster.\n\nThe result contains each client's client identifier.\
        \ For more details about each client you can call the endpoints that have\
        \ a clientId in their URL.\n\nThis endpoint uses pagination with a cursor.\n\
        The results are not sorted in any way, no ordering of any kind is guaranteed.\n\
        \nThis endpoint requires at least HiveMQ version 4.4.0. on all cluster nodes."
      operationId: getAllMqttClients
      parameters:
      - description: Specifies the page size for the returned results. Has to be between
          50 and 2500. Default page size is 500.
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          example: null
      - description: The cursor that has been returned by the previous result page.
          Do not pass this parameter if you want to fetch the first page.
        in: query
        name: cursor
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                empty-results:
                  description: Empty result if no clients are known.
                  summary: Empty result if no clients are known
                  value:
                    items: []
                multiple-results-last-page:
                  description: Example response with multiple clients. No more pages
                    left.
                  summary: "Multiple results, last page"
                  value:
                    items:
                    - id: client-12
                    - id: client-5
                    - id: client-32
                    - id: my-client-id2
                    - id: my-client-id
                multiple-results-pages-left:
                  description: Example response with multiple clients. More pages
                    left.
                  summary: "Multiple results, more pages left"
                  value:
                    items:
                    - id: client-12
                    - id: client-5
                    - id: client-32
                    - id: my-client-id2
                    - id: my-client-id
                    _links:
                      next: /api/v1/mqtt/clients?cursor=a-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=&limit=5
                single-result:
                  description: Example response with one known client.
                  summary: Single result
                  value:
                    items:
                    - id: client-12
              schema:
                $ref: '#/components/schemas/ClientList'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "410":
          content:
            application/json:
              examples:
                cursor-invalid:
                  description: Cursor not valid anymore
                  summary: The passed cursor is not valid anymore
                  value:
                    errors:
                    - title: Cursor not valid anymore
                      detail: "The passed cursor is not valid anymore, you can request\
                        \ this resource without a cursor to start from the beginning"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Cursor not valid anymore
        "503":
          content:
            application/json:
              examples:
                version-check-failed:
                  description: Version check failed
                  summary: Version check failed
                  value:
                    errors:
                    - title: Endpoint not active yet
                      detail: "Not all cluster nodes support this endpoint yet, please\
                        \ try again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not all cluster nodes at minimum version
      summary: List all MQTT clients
      tags:
      - MQTT Clients
  /api/v1/mqtt/clients/{clientId}:
    delete:
      description: "Invalidates the client session for a client with the given client\
        \ identifier. If the client is currently connected, it will be disconnected\
        \ as well.\n\n If your client identifiers contain special characters, please\
        \ make sure that the clientId is URL encoded (a.k.a. percent-encoding, as\
        \ in RFC 3986)."
      operationId: invalidateClientSession
      parameters:
      - description: The MQTT client identifier.
        in: path
        name: clientId
        required: true
        schema:
          type: string
          example: null
      - description: Whether to prevent the will message.
        in: query
        name: preventWillMessage
        schema:
          type: boolean
          default: false
          example: null
      responses:
        "204":
          content:
            application/json: {}
          description: Success (no content)
        "400":
          content:
            application/json:
              examples:
                param-invalid:
                  description: Bad request
                  summary: Query parameter can not be parsed
                  value:
                    errors:
                    - title: Parameter invalid
                      detail: Query parameter 'parameter-name' is invalid
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Invalidate a client session
      tags:
      - MQTT Clients
    get:
      description: "Returns detailed information for a specific client with it is\
        \ current state.\n\n Including all session and connection information.\nIf\
        \ your client identifiers contain special characters, please make sure that\
        \ the clientId is URL Encoded (a.k.a. percent-encoding, as in RFC 3986)."
      operationId: getMqttClientDetails
      parameters:
      - description: The MQTT client identifier.
        in: path
        name: clientId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                offline-client:
                  description: Offline client
                  summary: offline-client
                  value:
                    client:
                      id: client-1
                      connected: false
                      sessionExpiryInterval: 12345
                      messageQueueSize: 543
                      willPresent: false
                online-client:
                  description: Online client
                  summary: online-client
                  value:
                    client:
                      id: client-2
                      connected: true
                      sessionExpiryInterval: 15000
                      connectedAt: 2020-07-20T14:59:50.580Z
                      messageQueueSize: 0
                      willPresent: false
                      restrictions:
                        maxMessageSize: 268435460
                        maxQueueSize: 1000
                        queuedMessageStrategy: DISCARD
                      connection:
                        keepAlive: 60
                        mqttVersion: MQTTv5
                        connectedListenerId: TCP Listener
                        connectedNodeId: bRIG4
                        cleanStart: true
                        sourceIp: 127.0.0.1
                online-client-tls-proxy:
                  description: Online client with TLS and Proxy Protocol enabled
                  summary: online-client-tls-proxy
                  value:
                    client:
                      id: client-1
                      connected: true
                      sessionExpiryInterval: 12345
                      connectedAt: 2020-07-17T14:47:59.704Z
                      messageQueueSize: 543
                      willPresent: true
                      restrictions:
                        maxMessageSize: 20000
                      connection:
                        keepAlive: 120
                        mqttVersion: 3.1.1
                        connectedListenerId: Tcp Listener
                        connectedNodeId: node1
                        username: username
                        password: cGFzc3dvcmQ=
                        cleanStart: true
                        sourceIp: 192.168.1.200
                        proxyInformation:
                          sourceIp: 127.0.0.2
                          sourcePort: 8080
                          destinationIp: 127.0.0.3
                          destinationPort: 50123
                          tlvs:
                          - key: PP2_TYPE_ALPN
                            value: "1"
                          - key: PP2_TYPE_AUTHORITY
                            value: "2"
                        tlsInformation:
                          cipherSuite: cipher_suite
                          tlsVersion: "1.2"
                          certificateInformation:
                            commonName: common-name
                            organization: org
                            organizationalUnit: org-unit
                            serial: "-3522625861374876620"
                            validFrom: 2020-07-20T14:56:02.000Z
                            validUntil: 2020-07-21T14:56:12.000Z
                            country: DE
                            state: BY
                            version: "2"
              schema:
                $ref: '#/components/schemas/ClientItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Get detailed client information
      tags:
      - MQTT Clients
  /api/v1/mqtt/clients/{clientId}/connection:
    delete:
      description: "Disconnects a specific client if its is currently connected.\n\
        \n If your client identifiers contain special characters, please make sure\
        \ that the clientId is URL Encoded (a.k.a. percent-encoding, as in RFC 3986)."
      operationId: disconnectClient
      parameters:
      - description: The MQTT client identifier.
        in: path
        name: clientId
        required: true
        schema:
          type: string
          example: null
      - description: Whether to prevent the will message.
        in: query
        name: preventWillMessage
        schema:
          type: boolean
          default: false
          example: null
      responses:
        "204":
          content:
            application/json: {}
          description: Success (no content)
        "400":
          content:
            application/json:
              examples:
                param-invalid:
                  description: Bad request
                  summary: Query parameter can not be parsed
                  value:
                    errors:
                    - title: Parameter invalid
                      detail: Query parameter 'parameter-name' is invalid
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Disconnect a client
      tags:
      - MQTT Clients
    get:
      description: "Returns the information if a specific client is currently connected.\n\
        \n If you are only interested in the connection status of a client prefer\
        \ this endpoint over the the full client detail.\nIf your client identifiers\
        \ contain special characters, please make sure that the clientId is URL Encoded\
        \ (a.k.a. percent-encoding, as in RFC 3986)."
      operationId: getMqttClientConnectionState
      parameters:
      - description: The MQTT client identifier.
        in: path
        name: clientId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                online-client:
                  description: Online client
                  summary: online-client
                  value:
                    connection:
                      connected: false
              schema:
                $ref: '#/components/schemas/ConnectionItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Get a clients connection state
      tags:
      - MQTT Clients
  /api/v1/mqtt/clients/{clientId}/subscriptions:
    get:
      description: "List all subscriptions for a specific client.\n\nThis endpoint\
        \ does not support pagination with cursor at the moment, but it might be added\
        \ in future versions. Please make sure to check if a cursor is returned and\
        \ another page is available to have a future-proof implementation."
      operationId: getSubscriptionsForMqttClient
      parameters:
      - description: The MQTT client identifier.
        in: path
        name: clientId
        required: true
        schema:
          type: string
          example: null
      responses:
        "200":
          content:
            application/json:
              examples:
                empty-result:
                  description: Empty result if client has no subscriptions.
                  summary: Empty result if client has no subscriptions
                  value:
                    items: []
                multiple-results:
                  description: Example response with multiple results.
                  summary: Multiple results
                  value:
                    items:
                    - topicFilter: topic/0
                      qos: AT_MOST_ONCE
                      retainHandling: SEND
                      retainAsPublished: true
                      noLocal: false
                      subscriptionIdentifier: 1
                    - topicFilter: topic/2
                      qos: EXACTLY_ONCE
                      retainHandling: SEND
                      retainAsPublished: false
                      noLocal: true
                      subscriptionIdentifier: 3
                    - topicFilter: $share/sharename/topic/1
                      qos: AT_LEAST_ONCE
                      retainHandling: DO_NOT_SEND
                      retainAsPublished: false
                      noLocal: false
                      subscriptionIdentifier: 2
              schema:
                $ref: '#/components/schemas/ClientSubscriptionList'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                    - title: Required parameter missing
                      detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                    - title: Resource not found
                      detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: List all subscriptions for MQTT client
      tags:
      - MQTT Clients
components:
  schemas:
    Backup:
      type: object
      example: null
      properties:
        bytes:
          type: integer
          format: int64
          description: The size of this backup file in bytes.
          example: null
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Time the backup was created at
          example: null
        failReason:
          type: string
          description: "The reason why this backup failed, only present for failed\
            \ backups."
          example: null
          nullable: true
        id:
          type: string
          description: The id of this backup
          example: null
        state:
          type: string
          description: The current state of the backup
          enum:
          - COMPLETED
          - RESTORE_COMPLETED
          - IN_PROGRESS
          - RESTORE_IN_PROGRESS
          - FAILED
          - RESTORE_FAILED
          example: null
    BackupItem:
      type: object
      example: null
      properties:
        backup:
          $ref: '#/components/schemas/Backup'
    BackupList:
      type: object
      example: null
      properties:
        items:
          type: array
          description: List of result items that are returned by this endpoint
          example: null
          items:
            $ref: '#/components/schemas/Backup'
    CertificateInformation:
      type: object
      description: The client certificate sent by the client
      example: null
      nullable: true
      properties:
        commonName:
          type: string
          description: Common name
          example: null
          nullable: true
        country:
          type: string
          description: Country
          example: null
          nullable: true
        organization:
          type: string
          description: Organization
          example: null
          nullable: true
        organizationalUnit:
          type: string
          description: Organizational unit
          example: null
          nullable: true
        serial:
          type: string
          description: The certificates serial
          example: null
          nullable: true
        state:
          type: string
          description: State
          example: null
          nullable: true
        validFrom:
          type: string
          format: date-time
          description: Valid from date
          example: null
        validUntil:
          type: string
          format: date-time
          description: Valid until date
          example: null
        version:
          type: string
          description: Certificate version
          example: null
          nullable: true
    Client:
      type: object
      description: List of result items that are returned by this endpoint
      example: null
      properties:
        id:
          type: string
          example: null
    ClientDetails:
      type: object
      example: null
      properties:
        connected:
          type: boolean
          description: If this client is connected
          example: null
        connectedAt:
          type: string
          format: date-time
          description: Time the client connection was established
          example: null
          nullable: true
        connection:
          $ref: '#/components/schemas/ConnectionDetails'
        id:
          type: string
          description: The MQTT client identifier
          example: null
        messageQueueSize:
          type: integer
          format: int64
          description: The current message queue size for this client
          example: null
        restrictions:
          $ref: '#/components/schemas/ClientRestrictions'
        sessionExpiryInterval:
          type: integer
          format: int64
          description: The session expiry interval
          example: null
          nullable: true
        willPresent:
          type: boolean
          description: If a will is present for this client
          example: null
    ClientItem:
      type: object
      example: null
      properties:
        client:
          $ref: '#/components/schemas/ClientDetails'
    ClientList:
      type: object
      example: null
      properties:
        _links:
          $ref: '#/components/schemas/PaginationCursor'
        items:
          type: array
          description: List of result items that are returned by this endpoint
          example: null
          items:
            $ref: '#/components/schemas/Client'
    ClientRestrictions:
      type: object
      description: The restrictions that are in effect for this client
      example: null
      nullable: true
      properties:
        maxMessageSize:
          type: integer
          format: int64
          description: maximum MQTT message size
          example: null
          nullable: true
        maxQueueSize:
          type: integer
          format: int64
          description: maximum queue size
          example: null
          nullable: true
        queuedMessageStrategy:
          type: string
          description: The queue strategy if the queue is full
          example: null
          nullable: true
    ClientSubscription:
      type: object
      description: List of result items that are returned by this endpoint
      example: null
      properties:
        noLocal:
          type: boolean
          description: The No Local flag
          example: null
        qos:
          type: string
          description: The Quality of Service level
          enum:
          - AT_MOST_ONCE
          - AT_LEAST_ONCE
          - EXACTLY_ONCE
          example: null
        retainAsPublished:
          type: boolean
          description: The Retain As Published flag
          example: null
        retainHandling:
          type: string
          description: Retain handling option
          enum:
          - SEND
          - SEND_IF_NEW_SUBSCRIPTION
          - DO_NOT_SEND
          example: null
        subscriptionIdentifier:
          type: integer
          format: int32
          description: The subscription identifier
          example: null
          nullable: true
        topicFilter:
          type: string
          description: The MQTT topic filter
          example: null
    ClientSubscriptionList:
      type: object
      example: null
      properties:
        _links:
          $ref: '#/components/schemas/PaginationCursor'
        items:
          type: array
          description: List of result items that are returned by this endpoint
          example: null
          items:
            $ref: '#/components/schemas/ClientSubscription'
    Connection:
      type: object
      description: Information about the client's connection state
      example: null
      properties:
        connected:
          type: boolean
          description: If this client is currently connected
          example: null
    ConnectionDetails:
      type: object
      description: Information about the clients connection
      example: null
      nullable: true
      properties:
        cleanStart:
          type: boolean
          description: Clean start flag
          example: null
        connectedListenerId:
          type: string
          description: Id of the HiveMQ listener the client is connected to
          example: null
        connectedNodeId:
          type: string
          description: Id of the HiveMQ node the client is connected to
          example: null
        keepAlive:
          type: integer
          format: int32
          description: Connection Keep Alive in seconds
          example: null
          nullable: true
        mqttVersion:
          type: string
          description: MQTT version of the client
          example: null
        password:
          type: string
          format: byte
          description: Password
          example: null
          nullable: true
        proxyInformation:
          $ref: '#/components/schemas/ProxyInformation'
        sourceIp:
          type: string
          description: The client's IP
          example: null
          nullable: true
        tlsInformation:
          $ref: '#/components/schemas/TlsInformation'
        username:
          type: string
          description: Username
          example: null
          nullable: true
    ConnectionItem:
      type: object
      example: null
      properties:
        connection:
          $ref: '#/components/schemas/Connection'
    DiagnosticArchive:
      type: object
      example: null
      properties:
        bytes:
          type: integer
          format: int64
          description: The size of this diagnostic archive file in bytes.
          example: null
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Time the diagnostic archive was created at.
          example: null
        failReason:
          type: string
          description: "The reason why this diagnostic archive failed, only present\
            \ for failed diagnostic archives."
          example: null
          nullable: true
        id:
          type: string
          description: The id of this diagnostic archive.
          example: null
        state:
          type: string
          description: The current state of the diagnostic archive.
          enum:
          - COMPLETED
          - IN_PROGRESS
          - FAILED
          example: null
    DiagnosticArchiveItem:
      type: object
      example: null
      properties:
        diagnosticArchive:
          $ref: '#/components/schemas/DiagnosticArchive'
    Error:
      type: object
      example: null
      properties:
        detail:
          type: string
          description: Detailed contextual description of this error
          example: null
        title:
          type: string
          description: The type of this error
          example: null
    Errors:
      type: object
      example: null
      properties:
        errors:
          type: array
          example: null
          items:
            $ref: '#/components/schemas/Error'
    PaginationCursor:
      type: object
      description: Links for pagination
      example: null
      nullable: true
      properties:
        next:
          type: string
          example: null
    Policy:
      type: object
      description: A policy which is used to validate and execute certain actions
        based on the validation result.
      example: null
      properties:
        createdAt:
          type: string
          format: date-time
          description: The formatted UTC timestamp indicating when the policy was
            created.
          example: null
          readOnly: true
        id:
          type: string
          description: The unique identifier of the policy.
          example: null
        matching:
          $ref: '#/components/schemas/PolicyMatching'
        onFailure:
          $ref: '#/components/schemas/PolicyAction'
        onSuccess:
          $ref: '#/components/schemas/PolicyAction'
        validation:
          $ref: '#/components/schemas/PolicyValidation'
      required:
      - id
      - matching
    PolicyAction:
      type: object
      description: The action which will be triggered dependent of the validation
        outcome.
      example: null
      properties:
        pipeline:
          type: array
          description: "The pipeline to execute, when this action is triggered. The\
            \ operations in the pipeline are executed in-order."
          example: null
          items:
            $ref: '#/components/schemas/PolicyOperation'
    PolicyList:
      type: object
      description: A listing of policies.
      example: null
      properties:
        _links:
          $ref: '#/components/schemas/PaginationCursor'
        items:
          type: array
          description: List of result items that are returned by this endpoint
          example: null
          items:
            $ref: '#/components/schemas/Policy'
    PolicyMatching:
      type: object
      description: The policy's matching rules.
      example: null
      properties:
        topicFilter:
          type: string
          description: The topic filter for which the policy is matched.
          example: null
      required:
      - topicFilter
    PolicyOperation:
      type: object
      description: A policy operation which executes a referenced function.
      example: null
      properties:
        arguments:
          type: object
          description: The required arguments of the referenced function.
          example: null
        functionId:
          type: string
          description: The unique id of the referenced function to execute in this
            operation.
          example: null
        id:
          type: string
          description: The unique id of the operation in the pipeline.
          example: null
      required:
      - arguments
      - functionId
      - id
    PolicyValidation:
      type: object
      description: The validation part of the policy.
      example: null
      properties:
        validators:
          type: array
          description: The validators of the policy.
          example: null
          items:
            $ref: '#/components/schemas/PolicyValidator'
    PolicyValidator:
      type: object
      description: A policy validator which executes the defined validation.
      example: null
      properties:
        arguments:
          type: object
          description: The required arguments of the referenced validator type.
          example: null
        type:
          type: string
          description: The type of the validator.
          example: null
      required:
      - arguments
      - type
    ProxyInformation:
      type: object
      description: Proxy Protocol information
      example: null
      nullable: true
      properties:
        destinationIp:
          type: string
          description: The client's destination IP as seen by the proxy
          example: null
        destinationPort:
          type: integer
          format: int32
          description: The client's destination port as seen by the proxy
          example: null
        sourceIp:
          type: string
          description: The client's IP as seen by the proxy
          example: null
        sourcePort:
          type: integer
          format: int32
          description: The client's Port as seen by the proxy
          example: null
        tlvs:
          type: array
          description: Additional TLV fields contained in the proxy protocol information
          example: null
          items:
            $ref: '#/components/schemas/TLV'
          nullable: true
    Schema:
      type: object
      example: null
      properties:
        arguments:
          type: object
          additionalProperties:
            type: string
            description: The schema type dependent arguments.
            example: null
          description: The schema type dependent arguments.
          example: null
        createdAt:
          type: string
          description: The formatted UTC timestamp when the schema was created.
          example: null
          readOnly: true
        id:
          type: string
          description: The unique identifier of the schema.
          example: null
        schemaDefinition:
          type: string
          description: The base64 encoded schema definition.
          example: null
        type:
          type: string
          description: The type of the schema.
          example: null
      required:
      - id
      - schemaDefinition
      - type
    SchemaList:
      type: object
      description: A listing of schemas.
      example: null
      properties:
        _links:
          $ref: '#/components/schemas/PaginationCursor'
        items:
          type: array
          description: List of result items that are returned by this endpoint
          example: null
          items:
            $ref: '#/components/schemas/Schema'
    TLV:
      type: object
      description: Additional TLV fields contained in the proxy protocol information
      example: null
      nullable: true
      properties:
        key:
          type: string
          description: TLV Key
          example: null
        value:
          type: string
          description: TLV value
          example: null
    TlsInformation:
      type: object
      description: TLS information
      example: null
      nullable: true
      properties:
        certificateInformation:
          $ref: '#/components/schemas/CertificateInformation'
        cipherSuite:
          type: string
          description: The used cipher suite
          example: null
        tlsVersion:
          type: string
          description: The used TLS version
          example: null
    TraceFilter:
      type: object
      description: Topic filters to trace
      example: null
      properties:
        regex:
          type: string
          description: Regex pattern this filter will trace for.
          example: null
    TraceRecording:
      type: object
      description: "Trace recording item describing the desired (and optionally, when\
        \ receiving from the server: current) state of a trace recording"
      example: null
      properties:
        clientIdFilters:
          type: array
          description: Client ID filters to trace
          example: null
          items:
            $ref: '#/components/schemas/TraceFilter'
          uniqueItems: true
        endAt:
          type: string
          format: date-time
          description: Time the trace recording is scheduled to stop at. Must be at
            a later time from the start time
          example: null
        events:
          type: array
          description: MQTT events to trace
          example: null
          items:
            type: string
            description: MQTT events to trace
            enum:
            - MQTT_MESSAGE_CONNECT
            - MQTT_MESSAGE_CONNACK
            - MQTT_MESSAGE_SUBSCRIBE
            - MQTT_MESSAGE_SUBACK
            - MQTT_MESSAGE_PUBLISH
            - MQTT_MESSAGE_PUBACK
            - MQTT_MESSAGE_PUBREC
            - MQTT_MESSAGE_PUBREL
            - MQTT_MESSAGE_PUBCOMP
            - MQTT_MESSAGE_UNSUBSCRIBE
            - MQTT_MESSAGE_UNSUBACK
            - MQTT_MESSAGE_PINGREQ
            - MQTT_MESSAGE_PINGRESP
            - MQTT_MESSAGE_DISCONNECT
            - MQTT_MESSAGE_AUTH
            example: null
          uniqueItems: true
        name:
          type: string
          description: "Name of the trace recording. Must be unique, contain at least\
            \ three characters and only combinations of numbers, letters, dashes and\
            \ underscores are allowed"
          example: null
        startAt:
          type: string
          format: date-time
          description: Time the trace recording is scheduled to start at
          example: null
        state:
          type: string
          description: "Current state of the recording. Only sent by the API, ignored\
            \ if specified on POST"
          enum:
          - SCHEDULED
          - IN_PROGRESS
          - ABORTED
          - STOPPED
          example: null
        topicFilters:
          type: array
          description: Topic filters to trace
          example: null
          items:
            $ref: '#/components/schemas/TraceFilter'
          uniqueItems: true
    TraceRecordingItem:
      type: object
      example: null
      properties:
        traceRecording:
          $ref: '#/components/schemas/TraceRecording'
      required:
      - traceRecording
    TraceRecordingList:
      type: object
      example: null
      properties:
        items:
          type: array
          description: List of result items that are returned by this endpoint
          example: null
          items:
            $ref: '#/components/schemas/TraceRecording'
