/*
 * Copyright 2019-present HiveMQ and the HiveMQ Community
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hivemq.cli.commands;

import com.google.common.base.Joiner;
import com.google.common.primitives.Chars;
import com.hivemq.cli.DefaultCLIProperties;
import com.hivemq.cli.MqttCLIMain;
import com.hivemq.cli.converters.MqttVersionConverter;
import com.hivemq.cli.utils.MqttUtils;
import com.hivemq.client.mqtt.MqttVersion;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.tinylog.Logger;
import picocli.CommandLine;

import java.util.List;
import java.util.Objects;

@CommandLine.Command()
public abstract class MqttCommand extends AbstractCommand implements Context {

    @CommandLine.Option(names = {"-V", "--mqttVersion"}, converter = MqttVersionConverter.class,
            description = "The MQTT version used by the client (default: 5)", order = 1)
    private @Nullable MqttVersion version;

    @CommandLine.Option(names = {"-h", "--host"},
            description = "The hostname of the message broker (default 'localhost')", order = 1)
    private @Nullable String host;

    @CommandLine.Option(names = {"-p", "--port"}, description = "The port of the message broker (default: 1883)",
            order = 1)
    private @Nullable Integer port;

    @CommandLine.Option(names = {"-i", "--identifier"},
            description = "The client identifier UTF-8 String (default randomly generated string)", order = 1)
    private @Nullable String identifier;

    @CommandLine.Option(names = {"-ip", "--identifierPrefix"},
            description = "The prefix of the client Identifier UTF-8 String", order = 2)
    private @Nullable String identifierPrefix;

    public void setDefaultOptions() {
        final DefaultCLIProperties defaultCLIProperties =
                Objects.requireNonNull(MqttCLIMain.MQTTCLI).defaultCLIProperties();

        if (version == null) {
            version = defaultCLIProperties.getMqttVersion();
            Logger.trace("Setting value of 'version' to default value: {}", version);
        }
        if (host == null) {
            host = defaultCLIProperties.getHost();
            Logger.trace("Setting value of 'host' to default value: {}", host);
        }
        if (port == null) {
            port = defaultCLIProperties.getPort();
            Logger.trace("Setting value of 'port' to default value: {}", port);
        }
        if (identifierPrefix == null) {
            identifierPrefix = defaultCLIProperties.getClientPrefix();
        }
        if (identifier == null) {
            if (version == MqttVersion.MQTT_5_0) {
                identifier = "";
                Logger.trace("Empty identifier will lead to using broker generated client identifier");
            } else {
                final String rndID = MqttUtils.buildRandomClientID(defaultCLIProperties.getClientLength());
                identifier = identifierPrefix + rndID;
                Logger.trace("Created identifier ('{}')", identifier);
            }
        }

        logIdentifierWarnings();
    }

    private void logIdentifierWarnings() {
        if (version == MqttVersion.MQTT_5_0 && Objects.requireNonNull(identifier).isEmpty()) {
            // Client identifier will be generated by broker so no warning needs to be printed
            return;
        }
        final List<MqttUtils.IdentifierWarning> warnings =
                MqttUtils.getIdentifierWarnings(Objects.requireNonNull(identifier));

        for (final MqttUtils.IdentifierWarning warning : warnings) {
            switch (warning) {
                case TOO_LONG:
                    Logger.warn(
                            "Identifier '{}' may be too long (identifier length '{}' exceeds 23)",
                            identifier,
                            identifier.length());
                    break;
                case TOO_SHORT:
                    Logger.warn(
                            "Identifier '{}' may be too short (identifier length '{}' is less than 1)",
                            identifier,
                            identifier.length());
                    break;
                case CONTAINS_INVALID_CHAR:
                    final char[] invalidChars = MqttUtils.getInvalidIdChars(identifier);
                    Logger.warn(
                            "Identifier '{}' may contain invalid characters ({})",
                            identifier,
                            "'" + Joiner.on("', '").join(Chars.asList(invalidChars)) + "'");
                    break;
            }
        }
    }

    @Override
    public @NotNull String toString() {
        return "host=" + host + ", port=" + port + ", version=" + version +
                (identifier != null && !identifier.isEmpty() ? (", identifier=" + identifier) : "");
    }

    @Override
    public @NotNull String getKey() {
        return "client {" + "identifier='" + getIdentifier() + '\'' + ", host='" + getHost() + '\'' + '}';
    }

    public @NotNull MqttVersion getVersion() {
        return Objects.requireNonNull(version);
    }

    public @NotNull String getHost() {
        return Objects.requireNonNull(host);
    }

    public int getPort() {
        return Objects.requireNonNull(port);
    }

    @Override
    public @NotNull String getIdentifier() {
        return Objects.requireNonNull(identifier);
    }
}
